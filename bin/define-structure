#!/usr/bin/php
<?php
/**
 * Builds community / collection structure document for use by
 * structure-builder script.  This needs to be re-written as a Java
 * class similiar to other administrative tools.
 */
 
require_once(__DIR__. '/parse-arguments.inc.php');

/* 
 * Named constants
 */

// Argument names identified with a prefix
define('ARG_PREFIX', '--');

// Argument names
define('ARG_HELP',    'help');
define('ARG_DATA',    'data');
define('ARG_OUTPUT',  'output');

// Root element of import structure doc
define('ELEMENT_ROOT', 'import_structure');

// Each data directory has a structure file that defines
// the community/collection to which it corresponds
define('STRUCTURE_FILE', 'structure.xml');


/* 
 *  Parse & validate arguments
 */
$args = parse_arguments($argv);

if (empty($args) or array_key_exists(ARG_HELP, $args)) {
  echo usage();
  exit();
}

foreach (array(ARG_DATA, ARG_OUTPUT) as $required_arg) {
  if (! array_key_exists($required_arg, $args) or ! isset($args[$required_arg])) {
    echo PHP_EOL, 'Required argument missing: ', ARG_PREFIX.$required_arg, PHP_EOL;
    echo usage();
    exit(E_USER_ERROR);
  }
}

/*
 * Create a DOM to represent import structure. 
 * Begin construction at base of supplied data directory.
 */
if (! isset($element)) {
  $element = new DOMElement(ELEMENT_ROOT);
}

$structure_dom = new DOMDocument();
$structure_dom->appendChild(new DOMElement(ELEMENT_ROOT));

build_structure($structure_dom, $structure_dom->documentElement, $args[ARG_DATA]);


/*
 * Write structure to output file
 */
if (file_put_contents($args[ARG_OUTPUT], $structure_dom->saveXML()) === FALSE) {
  echo PHP_EOL, 'Failed to write structure to ', $args[ARG_PREFIX.ARG_OUTPUT], PHP_EOL;
  exit(E_ERROR);
}

/**
 * Recursive function walks data directory structure, looking for 
 * structure.xml files. Child <community> or <collection> elements
 * (one community/collection definition per structure file) are 
 * appended to the DOM representing overall import structure.
 */
function build_structure($dom, $element, $dir) {
  
  if (file_exists($dir . DIRECTORY_SEPARATOR . STRUCTURE_FILE)) {
    $structure_doc = new DOMDocument();
    $structure_doc->load($dir . DIRECTORY_SEPARATOR . STRUCTURE_FILE);

    // A structure.xml file defines a single community or collection. 
    // Die if multiple child nodes found under root element.
    // $element->childNodes->length counts text nodes so loop & filter:
    $child_nodes = array();
    
    foreach ($structure_doc->documentElement->childNodes as $child) {
      if ($child->nodeType == XML_TEXT_NODE) {
        continue;
      }
      $child_nodes[] = $child;
    }

    if (sizeof($child_nodes) > 1) {
      echo 'Multiple community/collection definitions found in ';
      echo $dir, DIRECTORY_SEPARATOR, STRUCTURE_FILE, PHP_EOL;
      exit(E_ERROR);
    }
    
    // Append the single child to the structure doc we're building,
    // deep copy = TRUE
    $imported_child = $dom->importNode($child_nodes[0], TRUE);
    $element->appendChild($imported_child);
    
    // Move down the DOM before recursing into subdirectories
    $element = $imported_child;
  }
  
  foreach (glob($dir .DIRECTORY_SEPARATOR. '*', GLOB_ONLYDIR) as $subdir) {
    build_structure($dom, $element, $subdir);
  }
  
  return;
}

/** 
 * Return script usage description
 */
function usage() { 

$usage = <<<USAGE

  Walks sample data directory structure and builds an XML file that
  defines communities, sub-communties, and collections for import
  by the structure-builder admin script.
  
  usage: define-structure [--help] --data [path/to/data] --output [path/to/output/file]

  --help           this message
  --data           path to sample data
  --output         location of output file

  E.g., 
  
  define-structure --data /opt/dspace/data --output /opt/dspace/data/import-structure.xml


USAGE;

  return $usage;
}

?>